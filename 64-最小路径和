```golang
func min(a, b int) int {
    if a > b {
        return b
    } else {
        return a
    }
}
func minPathSum(grid [][]int) int {
    m := len(grid)
    n := len(grid[0])
    dp := make([][]int, m)
    for i := 0; i < m; i++ {
        dp[i] = make([]int, n)
    }
    max := 1 << 31 - 1
    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            if i == 0 && j == 0 {
                dp[i][j] = grid[i][j]
                continue
            }
            left := max
            if j - 1 >= 0 {
                left = dp[i][j-1]
            }
            top := max
            if i - 1 >= 0 {
                top = dp[i-1][j]
            }
            dp[i][j] = min(left, top) + grid[i][j]
        }
    }
    return dp[m-1][n-1]
}
```
